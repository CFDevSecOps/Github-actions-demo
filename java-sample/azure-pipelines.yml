trigger:
- main
variables:
  tag: '$(Build.BuildId)'
jobs:
- job: A1
  pool:
    vmImage: ubuntu-18.04
  steps:
    - task: ArtifactoryGenericUpload@2
      inputs:
        artifactoryService: 'sabihajfrog'
        specSource: 'taskConfiguration'
        fileSpec: |
          {
            "files": [
              {
                "pattern": "$(System.DefaultWorkingDirectory)/kubernetes/deployment.yaml",
                "target": "helm/files"
              }
            ]
          }
        failNoOp: true
    - task: SonarQubePrepare@5
      inputs:
        SonarQube: 'soanrqube'
        scannerMode: 'Other'
        extraProperties: |
          # Additional properties that will be passed to the scanner,
          # Put one key=value per line, example:
          # sonar.exclusions=**/*.bin
          sonar.projectKey=javaproject
    - task: JavaToolInstaller@0
      inputs:
        versionSpec: '11'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'      
    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.11'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: true
        effectivePomSkip: false
        sonarQubeRunAnalysis: true
        sqMavenPluginVersionChoice: 'pom'
        checkStyleRunAnalysis: true
        pmdRunAnalysis: true
        findBugsRunAnalysis: true
    - task: SonarQubePublish@5
      inputs:
        pollingTimeoutSec: '300'
    - task: Docker@2
      inputs:
        containerRegistry: 'aqua login'
        command: 'login'
    - task: Docker@2
      inputs:
        containerRegistry: 'java_docker'
        repository: 'java/image'
        command: 'build'
        Dockerfile: '**/Dockerfile'
        tags: '$(tag)'

    - task: ArtifactoryDocker@1
      inputs:
        command: 'push'
        artifactoryService: 'sabihajfrog'
        targetRepo: 'java'
        imageName: 'sabiha2.jfrog.io/java/image:$(tag)'
        collectBuildInfo: true
        buildName: '$(Build.DefinitionName)'
        buildNumber: '$(Build.BuildNumber)'
      
    - task: CmdLine@2
      inputs:
        script: |
          sed "s|appimages|sabiha2.jfrog.io/java/image:$(tag)|g" $(System.DefaultWorkingDirectory)/javademo-aks-acr.yml > $(System.DefaultWorkingDirectory)/javademo-aks-acr-tmp.yml
          rm $(System.DefaultWorkingDirectory)/javademo-aks-acr.yml
          mv $(System.DefaultWorkingDirectory)/javademo-aks-acr-tmp.yml $(System.DefaultWorkingDirectory)/javademo-aks-acr.yml

    - task: CmdLine@2
      inputs:
        script: |
          wget https://github.com/aquasecurity/trivy/releases/download/v0.24.1/trivy_0.24.1_Linux-64bit.deb
          sudo dpkg -i trivy_0.24.1_Linux-64bit.deb
          trivy image sabiha2.jfrog.io/java/image:$(tag)    
  
    - task: CopyFiles@2
      inputs:
        Contents: 'javademo-aks-acr.yml'
        TargetFolder: '$(build.artifactstagingdirectory)'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
      condition: succeeded()
#- job: A2
#  pool:
#    vmImage: macos-latest
#  steps:
#    - task: CmdLine@2
#      inputs:
#        script: |
#          brew install terraform
#          brew install accurics
#     
#          accurics init
#          accurics plan
